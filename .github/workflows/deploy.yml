name: Build and Deploy Mitra AI to Cloud Run

on:
  push:
    branches:
      - master
      - feat/voice
    paths:
      - 'server/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - master
    paths:
      - 'server/**'
  workflow_dispatch: # Allow manual triggering

env:
  PROJECT_ID: mitra-348d9
  SERVICE: mitra-ai-server
  REGION: us-central1
  REGISTRY: gcr.io

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        working-directory: ./server
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        working-directory: ./server
        run: |
          python -m pytest --cov=. --cov-report=xml

  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/feat/voice'
    
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Check if GCP Service Account Key exists
        run: |
          if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "❌ Error: GCP_SA_KEY secret is not set in repository settings"
            echo "Please add the service account key to GitHub Secrets:"
            echo "1. Go to Repository Settings → Secrets and variables → Actions"
            echo "2. Create new secret: GCP_SA_KEY"
            echo "3. Paste the contents of github-actions-key.json"
            exit 1
          else
            echo "✅ GCP_SA_KEY secret is configured"
          fi

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Docker for Google Cloud
        run: gcloud auth configure-docker

      - name: Build Docker image
        working-directory: ./server
        run: |
          docker build -t $REGISTRY/$PROJECT_ID/$SERVICE:${{ github.sha }} .
          docker tag $REGISTRY/$PROJECT_ID/$SERVICE:${{ github.sha }} $REGISTRY/$PROJECT_ID/$SERVICE:latest

      - name: Push Docker image
        run: |
          docker push $REGISTRY/$PROJECT_ID/$SERVICE:${{ github.sha }}
          docker push $REGISTRY/$PROJECT_ID/$SERVICE:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE \
            --image $REGISTRY/$PROJECT_ID/$SERVICE:${{ github.sha }} \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --port 8080 \
            --memory 2Gi \
            --cpu 1 \
            --max-instances 10 \
            --min-instances 0 \
            --timeout 3600 \
            --concurrency 80 \
            --service-account github-actions@$PROJECT_ID.iam.gserviceaccount.com \
            --set-secrets "GOOGLE_API_KEY=mitra-google-api-key:latest,FIREBASE_PROJECT_ID=mitra-firebase-project-id:latest,FIREBASE_STORAGE_BUCKET=mitra-firebase-storage-bucket:latest,DEBUG=mitra-debug:latest,ENVIRONMENT=mitra-environment:latest,GOOGLE_CLOUD_PROJECT=mitra-google-cloud-project:latest,MAX_REQUESTS_PER_MINUTE=mitra-max-requests-per-minute:latest,MAX_REQUESTS_PER_HOUR=mitra-max-requests-per-hour:latest,CRISIS_CONFIDENCE_THRESHOLD=mitra-crisis-confidence-threshold:latest,SAFETY_CHECK_ENABLED=mitra-safety-check-enabled:latest,FIREBASE_SERVICE_ACCOUNT_KEY=mitra-firebase-service-account-key:latest" \
            --set-env-vars "HOST=0.0.0.0"

      - name: Test deployment
        run: |
          # Get the service URL
          SERVICE_URL=$(gcloud run services describe $SERVICE --region=$REGION --format='value(status.url)')
          echo "Service deployed at: $SERVICE_URL"
          
          # Test health endpoint
          sleep 30  # Wait for deployment to be ready
          curl --fail --retry 3 --retry-delay 10 "$SERVICE_URL/health" || exit 1
          
          echo "✅ Deployment successful and health check passed!"

      - name: Clean up old images
        run: |
          # Keep only the 5 most recent images
          gcloud container images list-tags $REGISTRY/$PROJECT_ID/$SERVICE \
            --limit=999999 --sort-by=TIMESTAMP \
            --format="get(digest)" | tail -n +6 | \
            xargs -I {} gcloud container images delete $REGISTRY/$PROJECT_ID/$SERVICE@{} --quiet || true